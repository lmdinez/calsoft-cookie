{"version":3,"sources":["ng://calsoft-cookie/lib/calsoft-cookie.service.ts","ng://calsoft-cookie/lib/calsoft-cookie.component.ts","ng://calsoft-cookie/lib/calsoft-cookie.module.ts"],"names":["CalsoftCookieService","document","platformId","this","documentIsAccessible","isPlatformBrowser","prototype","check","name","encodeURIComponent","getCookieRegExp","test","cookie","get","result","exec","decodeURIComponent","getAll","cookies","split","i","length","currentCookie","replace","set","value","expires","path","domain","secure","sameSite","cookieString","Date","getTime","toUTCString","delete","deleteAll","cookieName","hasOwnProperty","escapedName","RegExp","Injectable","args","providedIn","Inject","DOCUMENT","InjectionToken","decorators","type","PLATFORM_ID","CalsoftCookieComponent","ngOnInit","Component","selector","template","CalsoftCookieModule","NgModule","declarations","imports","exports"],"mappings":"gVACA,IAAAA,EAAA,WAQE,SAAAA,EAK6BC,EAEGC,GAFHC,KAAAF,SAAAA,EAEGE,KAAAD,WAAAA,EAE/BC,KAAKC,qBAAuBC,EAAAA,kBAAmBF,KAAKD,mBAOtDF,EAAAM,UAAAC,MAAA,SAAOC,GACL,QAAML,KAAKC,uBAIXI,EAAOC,mBAAoBD,GAEJL,KAAKO,gBAAiBF,GACdG,KAAMR,KAAKF,SAASW,UASrDZ,EAAAM,UAAAO,IAAA,SAAKL,GACH,GAAKL,KAAKC,sBAAwBD,KAAKI,MAAOC,GAAS,CACrDA,EAAOC,mBAAoBD,OAGrBM,EADiBX,KAAKO,gBAAiBF,GACNO,KAAMZ,KAAKF,SAASW,QAE3D,OAAOI,mBAAoBF,EAAQ,IAEnC,MAAO,IAMXd,EAAAM,UAAAW,OAAA,WACE,IAAMd,KAAKC,qBACT,MAAO,OAGHc,EAAc,GACdjB,EAAgBE,KAAKF,SAE3B,GAAKA,EAASW,QAA8B,KAApBX,EAASW,OAG/B,QAFMO,EAAuBlB,EAASW,OAAOO,MAAM,KAEzCC,EAAI,EAAGA,EAAID,EAAME,OAAQD,GAAK,EAAI,KACpCE,EAA+BH,EAAOC,GAAID,MAAM,KAEtDG,EAAe,GAAMA,EAAe,GAAIC,QAAS,KAAM,IACvDL,EAASF,mBAAoBM,EAAe,KAAUN,mBAAoBM,EAAe,IAI7F,OAAOJ,GAWTlB,EAAAM,UAAAkB,IAAA,SACEhB,EACAiB,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAM3B,KAAKC,qBAAX,KAII2B,EAAuBtB,mBAAoBD,GAAS,IAAMC,mBAAoBgB,GAAU,IAE5F,GAAKC,EACH,GAAwB,iBAAZA,EAGVK,GAAgB,WAFU,IAAIC,MAAM,IAAIA,MAAOC,UAAsB,IAAVP,EAAiB,GAAK,GAAK,IAE7CQ,cAAgB,SAEzDH,GAAgB,WAAaL,EAAQQ,cAAgB,IAIpDP,IACHI,GAAgB,QAAUJ,EAAO,KAG9BC,IACHG,GAAgB,UAAYH,EAAS,KAGlCC,IACHE,GAAgB,WAGbD,IACHC,GAAgB,YAAcD,EAAW,KAG3C3B,KAAKF,SAASW,OAASmB,IAQzB/B,EAAAM,UAAA6B,OAAA,SAAQ3B,EAAcmB,EAAeC,GAC7BzB,KAAKC,sBAIXD,KAAKqB,IAAKhB,EAAM,GAAI,IAAIwB,KAAK,iCAAkCL,EAAMC,IAMvE5B,EAAAM,UAAA8B,UAAA,SAAWT,EAAeC,GACxB,GAAMzB,KAAKC,qBAAX,KAIMc,EAAef,KAAKc,SAE1B,IAAM,IAAMoB,KAAcnB,EACnBA,EAAQoB,eAAgBD,IAC3BlC,KAAKgC,OAAQE,EAAYV,EAAMC,KAS7B5B,EAAAM,UAAAI,gBAAR,SAAyBF,OACjB+B,EAAsB/B,EAAKe,QAAS,yCAA0C,QAEpF,OAAO,IAAIiB,OAAQ,OAASD,EAAc,SAAWA,EAAc,iBAAkB,0BApKvFE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EASVC,EAAAA,OAAMF,KAAA,CAAEG,EAAAA,mBAb8BC,EAAAA,eAAcC,WAAA,CAAA,CAAAC,KAepDJ,EAAAA,OAAMF,KAAA,CAAEO,EAAAA,2KAfZ,GCDA,IAAAC,EAAA,WAaE,SAAAA,KAKF,OAHEA,EAAA5C,UAAA6C,SAAA,iCAbDC,EAAAA,UAASV,KAAA,CAAC,CACTW,SAAU,qBACVC,SAAU,iGAcZJ,EAlBA,GCAAK,EAAA,WAKA,SAAAA,KAMmC,2BANlCC,EAAAA,SAAQd,KAAA,CAAC,CACRe,aAAc,CAACP,GACfQ,QAAS,GAETC,QAAS,CAACT,OAEuBK,EAXnC","sourcesContent":["\nimport { Injectable, Inject, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalsoftCookieService {\n  private readonly documentIsAccessible: boolean;\n  constructor(\n   // The type `Document` may not be used here. Although a fix is on its way,\n   // we will go with `any` for now to support Angular 2.4.x projects.\n   // Issue: https://github.com/angular/angular/issues/12631\n   // Fix: https://github.com/angular/angular/pull/14894\n   @Inject( DOCUMENT ) private document: any,\n   // Get the `PLATFORM_ID` so we can check if we're in a browser.\n   @Inject( PLATFORM_ID ) private platformId: InjectionToken<Object>,\n ) {\n   this.documentIsAccessible = isPlatformBrowser( this.platformId );\n }\n\n\n //  @param name Cookie name\n //  @returns {boolean}\n \n check( name: string ): boolean {\n   if ( !this.documentIsAccessible ) {\n     return false;\n   }\n\n   name = encodeURIComponent( name );\n\n   const regExp: RegExp = this.getCookieRegExp( name );\n   const exists: boolean = regExp.test( this.document.cookie );\n\n   return exists;\n }\n\n\n   // @param name Cookie name\n   // @returns {any}\n\n get( name: string ): string {\n   if ( this.documentIsAccessible && this.check( name ) ) {\n     name = encodeURIComponent( name );\n\n     const regExp: RegExp = this.getCookieRegExp( name );\n     const result: RegExpExecArray = regExp.exec( this.document.cookie );\n\n     return decodeURIComponent( result[ 1 ] );\n   } else {\n     return '';\n   }\n }\n\n   // @returns {}\n\n getAll(): {} {\n   if ( !this.documentIsAccessible ) {\n     return {};\n   }\n\n   const cookies: {} = {};\n   const document: any = this.document;\n\n   if ( document.cookie && document.cookie !== '' ) {\n     const split: Array<string> = document.cookie.split(';');\n\n     for ( let i = 0; i < split.length; i += 1 ) {\n       const currentCookie: Array<string> = split[ i ].split('=');\n\n       currentCookie[ 0 ] = currentCookie[ 0 ].replace( /^ /, '' );\n       cookies[ decodeURIComponent( currentCookie[ 0 ] ) ] = decodeURIComponent( currentCookie[ 1 ] );\n     }\n   }\n\n   return cookies;\n }\n\n //  @param name     Cookie name\n //  @param value    Cookie value\n //  @param expires  Number of days until the cookies expires or an actual `Date`\n //  @param path     Cookie path\n //  @param domain   Cookie domain\n //  @param secure   Secure flag\n //  @param sameSite OWASP samesite token `Lax` or `Strict`\n\n set(\n   name: string,\n   value: string,\n   expires?: number | Date,\n   path?: string,\n   domain?: string,\n   secure?: boolean,\n   sameSite?: 'Lax' | 'Strict'\n ): void {\n   if ( !this.documentIsAccessible ) {\n     return;\n   }\n\n   let cookieString: string = encodeURIComponent( name ) + '=' + encodeURIComponent( value ) + ';';\n\n   if ( expires ) {\n     if ( typeof expires === 'number' ) {\n       const dateExpires: Date = new Date( new Date().getTime() + expires * 1000 * 60 * 60 * 24 );\n\n       cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n     } else {\n       cookieString += 'expires=' + expires.toUTCString() + ';';\n     }\n   }\n\n   if ( path ) {\n     cookieString += 'path=' + path + ';';\n   }\n\n   if ( domain ) {\n     cookieString += 'domain=' + domain + ';';\n   }\n\n   if ( secure ) {\n     cookieString += 'secure;';\n   }\n\n   if ( sameSite ) {\n     cookieString += 'sameSite=' + sameSite + ';';\n   }\n\n   this.document.cookie = cookieString;\n }\n\n\n //  @param name   Cookie name\n //  @param path   Cookie path\n //  @param domain Cookie domain\n \n delete( name: string, path?: string, domain?: string ): void {\n   if ( !this.documentIsAccessible ) {\n     return;\n   }\n\n   this.set( name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain );\n }\n\n //  @param path   Cookie path\n //   @param domain Cookie domain\n\n deleteAll( path?: string, domain?: string ): void {\n   if ( !this.documentIsAccessible ) {\n     return;\n   }\n\n   const cookies: any = this.getAll();\n\n   for ( const cookieName in cookies ) {\n     if ( cookies.hasOwnProperty( cookieName ) ) {\n       this.delete( cookieName, path, domain );\n     }\n   }\n }\n\n\n   // @param name Cookie name\n   // @returns {RegExp}\n\n private getCookieRegExp( name: string ): RegExp {\n   const escapedName: string = name.replace( /([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1' );\n\n   return new RegExp( '(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g' );\n }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-calsoft-cookie',\n  template: `\n    <p>\n      calsoft-cookie works!\n    </p>\n  `,\n  styles: []\n})\nexport class CalsoftCookieComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CalsoftCookieComponent } from './calsoft-cookie.component';\n\n\n\n@NgModule({\n  declarations: [CalsoftCookieComponent],\n  imports: [\n  ],\n  exports: [CalsoftCookieComponent]\n})\nexport class CalsoftCookieModule { }\n"]}